TOKEN = '5505410546:AAHxnzeBdA3BT4UrCKaSYHxGyvfg7vS9EIg'

import asyncio
import logging
from datetime import *
import random


#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from list_of_admins import list_of_admins as lsa

#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
#–∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
import custom_answer as cus_ans
from Data import DataBase
import sender_ban_static as bs


#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)


#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = DataBase('database.db')

def create_public_id():
	public_id=''
	for i in range(10):
		public_id+=str(random.randint(0, 9))
	return public_id


# def aim_stat():
# 	button_aim = f'–î–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {100 - db.count_user()[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
# 	return button_aim

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message : types.Message):

	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
	button_start = KeyboardButton('–ó–∞–π—Ç–∏ –≤ –º–∏—Ä –∑–Ω–∞–∫–æ–º—Å—Ç–≤')

	first_page = ReplyKeyboardMarkup(one_time_keyboard=True)

	first_page.add(button_start)
	if(not db.user_exists(message.from_user.id)):
    #–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		public_id=create_public_id()
		db.add_user(message.from_user.username,message.from_user.id,message.from_user.full_name,public_id)
		await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–±—è—Ç–∞–º–∏ –∏–∑ –ª—é–±–æ–π —à–∫–æ–ª—ã –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–∞—à–µ —à–∫–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω)',reply_markup=first_page)
		
    # await bot.send_message(-1001406772763,f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID - {str(message.from_user.id)}\nusername - {str(message.from_user.username)}')
	else:
		await message.answer('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å',reply_markup=first_page)


@dp.message_handler(lambda message: message.text == '–ó–∞–π—Ç–∏ –≤ –º–∏—Ä –∑–Ω–∞–∫–æ–º—Å—Ç–≤' or message.text == '/main_start',state='*')
async def main_start(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Å–∞–º–æ–≥–æ –±–æ—Ç–∞'''
	# await send_log(message)
	#–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	button_join_chat = KeyboardButton('–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —à–∫–æ–ª—ã')
	button_create_profile = KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå')
	button_edit_profile = KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìù')
	button_send_request = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Çüòè')
	button_check_notes = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã')
	button_remove_profile = KeyboardButton('–£–¥–∞–ª–∏—Ç—åüóë')
	button_admin = KeyboardButton('–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
	menu = ReplyKeyboardMarkup(row_width=2)

	if(not db.profile_exists(message.from_user.id)):
			menu.add(button_join_chat,button_create_profile)
	elif(db.profile_exists(message.from_user.id)) :
		menu.add(button_join_chat,button_edit_profile,button_remove_profile, button_admin, button_send_request, button_check_notes)

	await message.answer('–ï—Å–ª–∏ —á—Ç–æ, —Ç–æ –≤–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏üòâ',reply_markup=menu)

class CreateProfile(StatesGroup):
	name = State()
	description = State()
	city = State()
	photo = State()
	sex = State()
	age = State()
	social_link	 = State()
	school=State()
	
@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå',state='*')
async def create_profile(message : types.Message):
	button_exit = KeyboardButton('–í—ã–π—Ç–∏‚ùå')
	menu_exit = ReplyKeyboardMarkup()
	menu_exit.add(button_exit)
	if message.from_user.username != None:
		if(not db.profile_exists(message.from_user.id)):
			await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?",reply_markup=menu_exit)
			await CreateProfile.name.set()
		elif(db.profile_exists(message.from_user.id)) :
			await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞\n\n')
	else:
		await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> Edit Profile(–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å) –∏ –∂–º—è–∫–∞–π—Ç–µ add username\n\n–¢–∞–º –≤–≤–æ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤—É–∞–ª—è')

@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await main_start(message)
		return
	if len(str(message.text)) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_name=message.text)
		button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
		skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
		skip_input.add(button_skip)
		await message.answer('–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Å–µ–±–µ –ø–∞—Ä—É —Å–ª–æ–≤(—ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ª—É—á—à–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ)', reply_markup=skip_input)
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		return

@dp.message_handler(state=CreateProfile.description)
async def create_profile_description(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await main_start(message)
		return
	if str(message.text) == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
		await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', reply_markup=ReplyKeyboardRemove())
		await state.update_data(profile_description='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
		await CreateProfile.next()
		return
	if len(message.text)<100 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_description=message.text)
		await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', reply_markup=ReplyKeyboardRemove())
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É', reply_markup=ReplyKeyboardRemove())
	else:
		await message.answer(cus_ans.random_reapeat_list())
		return

@dp.message_handler(state=CreateProfile.city)
async def create_profile_city(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await main_start(message)
		return
	if len(message.text) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_city=message.text.lower())
		await message.answer('–ü—Ä–µ–ª–µ—Å—Ç–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫—É\n\n–í–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		return
	
@dp.message_handler(state=CreateProfile.photo,content_types=['photo'])
async def create_profile_photo(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await main_start(message)

	button_male = KeyboardButton('–ú—É–∂—Å–∫–æ–π')

	button_wooman = KeyboardButton('–ñ–µ–Ω—Å–∫–∏–π')

	sex_input = ReplyKeyboardMarkup(one_time_keyboard=True)
	sex_input.add(button_male,button_wooman)

	await message.photo[-1].download('photo_user/' + str(message.from_user.id) + '.jpg')
	await message.answer('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ,—É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª',reply_markup=sex_input)
	await CreateProfile.next()
@dp.message_handler(state=CreateProfile.sex)
async def create_profile_sex(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await main_start(message)
		return
	if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
		await state.update_data(profile_sex=message.text.lower())
		await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å\n\n–î–∞–≤–∞–π –∂–µ —É–∑–Ω–∞–µ–º —Ç–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç ')
		await CreateProfile.next()
	else:
		await message.answer(cus_ans.random_reapeat_list())
		return

@dp.message_handler(state=CreateProfile.age)
async def create_profile_age(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
			await state.finish()
			await main_start(message)
			return
		if int(message.text) < 6:
			await message.answer('–æ–πü§≠\n–¢—ã —á—ë—Ç –º–∞–ª–æ–≤–∞—Ç...')
			await message.answer(cus_ans.random_reapeat_list())

			return
		elif int(message.text) > 54:
			await message.answer('–¢—ã —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä —á—Ç–æ–±—ã –±—ã—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–ºüë®‚Äç')
			await message.answer(cus_ans.random_reapeat_list())

			return
		elif int(message.text) > 6 and int(message.text) < 54:
			await state.update_data(profile_age=message.text)
			button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
			skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
			skip_input.add(button_skip)
			await message.answer('–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ!!\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–öü§ë\n–ï—Å–ª–∏ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°',reply_markup=skip_input)
			await CreateProfile.next()
		else:
			await message.answer('–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
			return
	except:
		await message.answer(cus_ans.random_reapeat_list())
		return

@dp.message_handler(state=CreateProfile.social_link)
async def create_profile_social_link(message: types.Message, state: FSMContext):
    try:
        if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
            await state.finish()
            await main_start(message)
            return
        if str(message.text) == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await state.update_data(profile_link="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            await message.answer('–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã, –≤ —á–∞—Ç –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å')
            await CreateProfile.next()
        elif str(message.text).startswith('https://vk.com/'):
            await state.update_data(profile_link=message.text)
            await message.answer('–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã, –≤ —á–∞—Ç –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å')
            await CreateProfile.next()
        else :
            await message.answer('–°—Å—ã–ª–∫–∞ –∫–æ—Ä—è–≤–∞—è!!\n\n–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://vk.com/\n\n–ö –ø—Ä–∏–º–µ—Ä—É - https://vk.com/someone/')

            return
    except:
        await message.answer(cus_ans.random_reapeat_list())
        #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return

	
@dp.message_handler(state=CreateProfile.school)
async def create_profile_school(message: types.Message, state: FSMContext):
    try:
        if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
            await state.finish()
            await main_start(message)
            return
        if len(message.text)<=5:
            await state.update_data(profile_school=message.text)
            await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
            user_data = await state.get_data()
            db.create_profile(message.from_user.id,message.from_user.username,str(user_data['profile_name']),str(user_data['profile_description']),str(user_data['profile_city']),str(user_data['profile_sex']),str(user_data['profile_age']),str(user_data['profile_link']), str(user_data['profile_school']), 'photo/' + str(message.from_user.id) + '.jpg') #self,telegram_id,telegram_username,name,description,city,photo,sex,age,social_link
            await state.finish()
            await main_start(message)
        else:
            await message.answer('–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã')
            return
    except:
        await message.answer(cus_ans.random_reapeat_list())
        #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return


		

@dp.message_handler(lambda message: str(message.text) == '–£–¥–∞–ª–∏—Ç—åüóë')
async def delete_profile(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
	# await send_log(message)
	try:
		db.delete_profile(message.from_user.id) 
		await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
		await main_start(message)
	except:
		await message.answer(cus_ans.random_reapeat_list())
		return


@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìù')
async def edit_profile(message : types.Message):
    if(not db.profile_exists(message.from_user.id)):
        await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!')
    elif(db.profile_exists(message.from_user.id)) :
        photo = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')
        #–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        button_school = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã')

        button_again = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')

        button_edit_description = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã')

        button_edit_age = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤')

        button_cancel = KeyboardButton('–í—ã–π—Ç–∏‚ùå')

        edit_profile = ReplyKeyboardMarkup(one_time_keyboard=True)
        edit_profile.add(button_again,button_edit_description,button_edit_age,button_cancel, button_school)
        caption = '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n'
        inf=list(db.all_profile(message.from_user.id)[0][3:-2:])
        for i in range(len(inf)):
            if str(inf[i])!='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
                caption+=cus_ans.profile_naming[i]+inf[i]
        await message.answer_photo(photo,caption=caption,reply_markup=edit_profile)
        photo.close()




@dp.message_handler(lambda message: message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
async def edit_profile_again(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ'''
	# await send_log(message)
	try:
		db.delete_profile(message.from_user.id)
		await create_profile(message)

	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return


class EditProfile(StatesGroup):
	description_edit = State()
	age_edit = State()
	school_edit = State()


@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã')
async def edit_profile_age(message : types.Message):
	try:
		button_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

		button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

		button_cancel_menu.add(button_cancel)

		if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤':
			await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Å—Ç',reply_markup=button_cancel_menu)
			await EditProfile.age_edit.set()
		elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã':
			await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ö–∞–π–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã!',reply_markup=button_cancel_menu)
			await EditProfile.description_edit.set()
		elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã':
			await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã',reply_markup=button_cancel_menu)
			await EditProfile.school_edit.set()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
	
@dp.message_handler(state=EditProfile.age_edit)
async def edit_profile_age_step2(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await main_start(message)

			return
		elif int(message.text) < 6:
			await message.answer('–æ–πü§≠\n–¢—ã —á—ë—Ç –º–∞–ª–æ–≤–∞—Ç...')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 54:
			await message.answer('–ü–∞–∂–∏–ª–æ–π —á–µ–ª–æ–≤–µ–∫üë®‚Äç')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 6 and int(message.text) < 54:
			await message.answer('–ú–∞–ª—ã–π –ø–æ–≤–∑—Ä–æ—Å–ª–µ–ª –ø–æ–ª—É—á–∞–µ—Ç—Å—èü§ó\n\n–í–æ–∑–≤—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ë–Ω!')
			await state.update_data(edit_profile_age=message.text)
			user_data = await state.get_data()

			db.edit_age(user_data['edit_profile_age'],str(message.from_user.id))
			await state.finish()
			await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
	
@dp.message_handler(state=EditProfile.description_edit)
async def edit_profile_description(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await main_start(message)

			return
		await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
		await state.update_data(edit_profile_description=message.text)
		user_data = await state.get_data()

		db.edit_description(user_data['edit_profile_description'],str(message.from_user.id))
		await state.finish()
		await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
	
@dp.message_handler(state=EditProfile.school_edit)
async def edit_profile_school_step2(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await main_start(message)
			return
		if len(message.text)<5:
			await state.update_data(edit_profile_school=message.text)
			user_data = await state.get_data()
			db.edit_school(user_data['edit_profile_school'],str(message.from_user.id))
			await state.finish()
			await edit_profile(message)
			
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏‚ùå')
async def exit(message : types.Message):
	await main_start(message)


@dp.message_handler(lambda message: message.text == '–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —à–∫–æ–ª—ã')
async def set_session(message: types.Message):

	try:
		if db.profile_exists(message.from_user.id):
			button_close_session=KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')
			button_of_anonymus_off=KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å')
			button_of_anonymus_on=KeyboardButton('–í–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å')
			session=ReplyKeyboardMarkup()
			session.add(button_close_session, button_of_anonymus_off, button_of_anonymus_on)
			db.set_session(message.from_user.id, "active")
			await bot.send_message(message.from_user.id, f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ —à–∫–æ–ª—ã {str(db.get_school(message.from_user.id)[0])}", reply_markup=session)
		else:
			await message.answer('–¢—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª –∞–Ω–∫–µ—Ç—É, –±–µ–≥–æ–º –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ')	
			return
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')
async def quit_chat(message: types.Message):
    db.set_session(message.from_user.id, "sleep")
    await bot.send_message(message.from_user.id, "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!)")
    await main_start(message)

@dp.message_handler(lambda message: message.text == '–í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å')
async def quit_chat(message: types.Message):
	if db.get_stat_of_anonymus(message.from_user.id)[0]=='1':
		await message.answer("–†–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω(—Ç–µ–ø–µ—Ä—å –Ω–∞–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –Ω–∏–∫–Ω–µ–π–º)")
		db.set_stat_of_anonymus(message.from_user.id, 'False')
	else:
		await message.answer("–†–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω")

@dp.message_handler(lambda message: message.text == '–í–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å')
async def quit_chat(message: types.Message):
	if db.get_stat_of_anonymus(message.from_user.id)[0]=='False':
		await message.answer("–†–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω(—Ç–µ–ø–µ—Ä—å –Ω–∞–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –Ω–∏–∫–Ω–µ–π–º)")
		db.set_stat_of_anonymus(message.from_user.id, '1')
	else:
		await message.answer("–†–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏ —Ç–∞–∫ –≤–∫–ª—é—á–µ–Ω")

class Admin(StatesGroup):
	users_by_school = State()

@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
async def admin_panel(message: types.Message):
	if message.from_user.id in lsa:
		button_show_all_schools=KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∫–æ–ª')
		button_count_users_in_school = KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ —à–∫–æ–ª–µ')
		button_count_all_users=KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤")
		send_ban_static = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
		button_cancel = KeyboardButton('–í—ã–π—Ç–∏‚ùå')
		send_post=KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —à–∫–æ–ª—É –∏–ª–∏ –≤—Å–µ–º")
		admin_markup=ReplyKeyboardMarkup()
		admin_markup.add(button_show_all_schools, button_count_users_in_school, button_count_all_users, button_cancel, send_ban_static, send_post)
		await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω! –í–æ—Ç —Ç–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', reply_markup=admin_markup)
	else:
		await message.answer("–£–≤—ã, –Ω–æ –≤–∞–º  –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ(")
		return
	
class Send_post(StatesGroup):
	number_of_school=State()
	text_post = State()
	photo_post = State()

@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —à–∫–æ–ª—É –∏–ª–∏ –≤—Å–µ–º')
async def list_of_schools(message: types.Message):
	if message.from_user.id in lsa:
		# send_all = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —à–∫–æ–ª–∞–º")
		send_to= KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —à–∫–æ–ª—É")
		button_cancel = KeyboardButton('–í—ã–π—Ç–∏‚ùå')
		send_menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		send_menu.add(send_to,button_cancel)
		await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ", reply_markup=send_menu)
	else:
		await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —à–∫–æ–ª–∞–º')
async def list_of_schools(message: types.Message):
	if message.from_user.id in lsa:
		try:
			button_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')
			button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			button_cancel_menu.add(button_cancel)
			await message.answer('''–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞''', reply_markup=button_cancel_menu)
			await Send_post.text_post.set()
		except:
			await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–¥–∞—Ç—å —Ñ–æ—Ä–º—É")
	else:
		await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —à–∫–æ–ª—É')
async def send_to_school(message: types.Message):
	if message.from_user.id in lsa:
		try:
			button_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')
			button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			button_cancel_menu.add(button_cancel)
			await message.answer('''–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã''', reply_markup=button_cancel_menu)
			await Send_post.number_of_school.set()
		except:
			await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–¥–∞—Ç—å —Ñ–æ—Ä–º—É")
	else:
		message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@dp.message_handler(state=Send_post.number_of_school)
async def set_school(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await admin_panel(message)
			return
		elif len(message.text)<5:
			await state.update_data(number_of_school=message.text)
			await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç')
			await Send_post.next()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
	
@dp.message_handler(state=Send_post.text_post)
async def set_text(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await admin_panel(message)
			return
		elif len(message.text)<100:
			button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
			skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
			skip_input.add(button_skip)
			await state.update_data(text_post=message.text)
			await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ', reply_markup=skip_input)
			await Send_post.next()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

@dp.message_handler(state=Send_post.photo_post, content_types=['photo', 'text'])
async def set_photo(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
			# user_data = await state.get_data()
			# if user_data['number_of_school']==None:
			# 	await state.update_data(number_of_school='all')
			user_data = await state.get_data()
			caption=''
			inf=[user_data['number_of_school'], user_data['text_post']]
			for i in range(len(inf)):
				caption+=inf[i]+'\n'
			await message.answer(caption)
			await state.finish()
			await admin_panel(message)
			return

		await message.photo[-1].download('photo_posts/' + str(message.from_user.id) + '.jpg')
		# user_data = await state.get_data()
		# if user_data['number_of_school']==None:
		# 	await state.update_data(number_of_school='all')
		user_data = await state.get_data()
		caption=''
		photo = open('photo_posts/' + str(message.from_user.id) + '.jpg','rb')
		inf=[user_data['number_of_school'], user_data['text_post']]
		for i in range(len(inf)):
			caption+=inf[i]+'\n'
		await message.answer_photo(photo,caption=caption)
		await state.finish()
		photo.close()
		await main_start(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
	

@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
async def list_of_schools(message: types.Message):
	if message.from_user.id in lsa:
		try:
			file = 'ban_list.txt'
			bs.creating_ban_list(file, db)
			print(bs.send_email(file=file))
			db.delete_ban_list()
			await message.answer("–ë–∞–Ω-–ª–∏—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É")
			await admin_panel(message)
		except:
			await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω-–ª–∏—Å—Ç")
			await admin_panel(message)
	else:
		message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@dp.message_handler(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∫–æ–ª')
async def list_of_schools(message: types.Message):
	if message.from_user.id in lsa:	
		list_of_schools=''
		for school in db.get_schools():
			list_of_schools+=str(school[0])+' '
		await message.answer(list_of_schools)
	else:
		message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
	
@dp.message_handler(lambda message: message.text == '–ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤')
async def count_all_users(message: types.Message):
	if message.from_user.id in lsa:	
		await message.answer(db.get_count_users()[0][0])
	else:
		message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
	
@dp.message_handler(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ —à–∫–æ–ª–µ')
async def request_to_school(message: types.Message):
	if message.from_user.id in lsa:	
		button_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

		button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

		button_cancel_menu.add(button_cancel)
		await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —à–∫–æ–ª—ã", reply_markup=button_cancel_menu)
		await Admin.users_by_school.set()
	else:
		message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")	

@dp.message_handler(state=Admin.users_by_school)
async def request_to_school(message: types.Message, state=FSMContext):
    try:
        if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
            await state.finish()
            await admin_panel(message)
            return
        elif len(message.text)<5:
            school=db.get_user_by_school(message.text)
            await state.update_data(users_by_school=school)
            user_data = await state.get_data()
            await state.finish()
            await bot.send_message(message.from_user.id, user_data['users_by_school'][0][0])
            await admin_panel(message)

    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return

class Send_request(StatesGroup):
	public_id2 = State()
	description = State()

@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Çüòè')
async def request(message: types.Message):
	try:
		button_cancel = KeyboardButton('–í—ã–π—Ç–∏‚ùå')
		button_cancel_menu = ReplyKeyboardMarkup()
		button_cancel_menu.add(button_cancel)
		await message.answer('''–û—Ç–ø—Ä–∞–≤—å id —Ç–æ–≥–æ, –∫–æ–º—É —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n
					   –ü–æ–¥—Å–∫–∞–∑–∫–∞: id - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ª—é—á–∏–ª –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å)''', reply_markup=button_cancel_menu)
		await Send_request.public_id2.set()
	except:
		await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–¥–∞—Ç—å —Ñ–æ—Ä–º—É")

@dp.message_handler(state=Send_request.public_id2)
async def set_username2(message: types.Message, state=FSMContext):
	try:
		if db.pb_id_exists(message.text):
			button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
			skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
			skip_input.add(button_skip)
			await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –∞ –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup=skip_input)
			await state.update_data(public_id2=str(message.text))
			await Send_request.next()
		else:
			await message.answer("–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ—á–∫–∞ —É –Ω–∞—Å –Ω–µ —á–∏—Å–ª–∏—Ç—Å—èüò¢")
			return
	except:
		await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
		return
	
@dp.message_handler(state=Send_request.description)
async def set_description(message: types.Message, state=FSMContext):
	public_id = db.get_pb_id(message.from_user.id)[0]
	try:
		if str(message.text) == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
			await state.update_data(description="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
			user_data = await state.get_data()
			db.set_requset(str(public_id), str(user_data["public_id2"]), str(user_data["description"]))
			await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!")
			await state.finish()
			await main_start(message)
		elif 0<len(str(message.text))<=50 and (not str(message.text) in cus_ans.ban_symvols):
			await state.update_data(description=str(message.text))
			user_data = await state.get_data()
			db.set_requset(str(public_id), str(user_data["public_id2"]), str(user_data["description"]))
			await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!")
			await state.finish()
			await main_start(message)
		elif str(message.text) in cus_ans.ban_symvols:
			await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É', reply_markup=ReplyKeyboardRemove())
		else:
			await message.answer(cus_ans.random_reapeat_list())
			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
	except:
		await message.answer('??????')
		return
	
@dp.message_handler(lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã')
async def check_notices(message: types.Message):
	public_id = db.get_pb_id(message.from_user.id)[0]
	try:
		if db.check_bool_notices(public_id):
			await message.answer('–Æ—Ö—É—É—É, –º—ã –Ω–∞—à–ª–∏ –∑–∞–ø—Ä–æ—Å–∏–∫ (–∏–ª–∏ –±–æ–ª—å—à–µ)\n–ß—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–ø–∏–∏—à–∏ "–û–¥–æ–±—Ä–∏—Ç—å –∏ –Ω–∏–∫–Ω–µ–π–º"')
			markup_accept = ReplyKeyboardMarkup(one_time_keyboard=True)
			for notice in db.check_notices(public_id):
				button = KeyboardButton(f'–û–¥–æ–±—Ä–∏—Ç—å {str(notice[1])}')
				markup_accept.add(button)
				await bot.send_message(message.from_user.id, f'–ó–∞–ø—Ä–æ—Å–∏–∫:\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {str(notice[1])}\n–û–ø–∏—Å–∞–Ω–∏–µ - {str(notice[3])}')
			await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–≥–æ –æ–¥–æ–±—Ä–∏—Ç—å", reply_markup=markup_accept)
		else:
			await message.answer('–≠—Ö—Ö—Ö, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –≤–∞–º –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å—ã(')
			await main_start(message)
	except:
		await bot.send_message(message.from_user.id, cus_ans.random_reapeat_list())

@dp.message_handler(lambda message: "–æ–¥–æ–±—Ä–∏—Ç—å" in str(message.text).lower())
async def check_notices(message: types.Message):
	public_id2=str(message.text).lower().split()[1]
	user_id2=db.get_tgid_pb_id(public_id2)[0]
	if db.user_exists(user_id2):

		photo1 = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')
		photo2 = open('photo_user/' + str(user_id2) + '.jpg','rb')
		caption1 = '–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä—è—é—â–µ–≥–æ:\n'
		caption2 = '–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n'
		inf1=list(db.all_profile(message.from_user.id)[0][3:-2:])
		inf2=list(db.all_profile(user_id2)[0][3:-2:])
		for i in range(len(inf2)):
			if str(inf2[i])!='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
				caption2+=cus_ans.profile_naming[i]+inf2[i]
		for i in range(len(inf1)):
			if str(inf1[i])!='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
				caption1+=cus_ans.profile_naming[i]+inf1[i]	
		await bot.send_message(user_id2, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, –≤–æ—Ç –∞–Ω–∫–µ—Ç–∞ –∞–Ω–∫–µ—Ç–∞ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")	
		await bot.send_photo(user_id2, photo1, caption=caption1)	
		await message.answer_photo(photo2, caption=caption2)
		db.delete_notices(user_id2, message.from_user.id)
		photo1.close()
		photo2.close()
		await main_start(message)
	else:
		await message.answer('–¢–∞–∫–æ–π —á–µ–ª–æ–≤–µ—á–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
		await main_start(message)

@dp.message_handler()
async def chatting(message: types.Message):
	public_id=db.get_pb_id(message.from_user.id)[0]
	if str(db.get_session(message.from_user.id)[0])=='active':
		list_active_users=[user_id for user_id in db.get_user_id_in_school(db.get_school(message.from_user.id)[0])]
		print(list_active_users)
		db.add_user_ban_list(message.text.lower(), message.from_user.id)
		for i in list_active_users:
			if str(i[0])!=str(message.from_user.id):
				if db.get_stat_of_anonymus(message.from_user.id)[0]=="1":
					if message['reply_to_message']:
						await bot.send_message(i[0], message.text, reply_to_message_id=message['reply_to_message']['message_id']-1)
					else:
						await bot.send_message(i[0], message.text)
				else:
					if message['reply_to_message']:
						
						await bot.send_message(i[0], f"***/{str(public_id)}/***\n{message.text}", reply_to_message_id=message['reply_to_message']['message_id']-1)
					else:
						await bot.send_message(i[0], f"***/{str(public_id)}/***\n{message.text}")
	else:
		await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–æ—à–ª–∏ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
		
if __name__=="__main__":
	executor.start_polling(dp, skip_updates=False)


